{"details":{"slug":"my-favorite-music-and-mdx","content":{"en":{"title":"My favorite music and MDX","description":"Introduction to MDX and how to use it with Next.js to create a simple blog."}},"categories":["mdx","next.js","markdown","tailwind-css"],"locales":["en"],"created_at":"2020/11/28","published_at":"2020/12/03","updated_at":"2021/08/14","is_published":true,"sources":[],"assets":{"github":{"name":"website","url":"https://github.com/diegofrayo/website","description":"My personal website","files":{"MDXContent":{"fileName":"src/modules/mdx/client.tsx","url":"https://github.com/diegofrayo/website/blob/master/src/modules/mdx/client.tsx"},"SourceCode":{"fileName":"src/components/shared/SourceCode.tsx","url":"https://github.com/diegofrayo/website/blob/master/src/components/shared/SourceCode.tsx"},"mdx":{"fileName":"src/modules/mdx/client.tsx","url":"https://github.com/diegofrayo/website/blob/master/src/modules/mdx/client.tsx"},"components|blog|slug":{"fileName":"src/modules/pages/blog/pages.BlogPostPage.tsx","url":"https://github.com/diegofrayo/website/blob/master/src/modules/pages/blog/pages/BlogPostPage.tsx"},"pages|blog|slug":{"fileName":"src/pages/blog/[slug].ts","url":"https://github.com/diegofrayo/website/blob/master/src/pages/blog/[slug].ts"},"MDXContent-Styles":{"fileName":"src/modules/mdx/styles.module.css","url":"https://github.com/diegofrayo/website/blob/master/src/modules/mdx/styles.module.css"}}},"$sourceCodeFiles":{"1":"export default function HelloWorldMDX({ text }: { text: string }) {\n\treturn <Text className=\"tw-block tw-bg-red-200 tw-p-2 tw-text-red-700\">{text}</Text>;\n}\n","4":"export const getStaticPaths: GetStaticPaths = async function getStaticPaths() {\n\tconst data = await loadData<T_RawBlogPostsResponse>({ localPath: `blog/data.json` });\n\n\treturn {\n\t\tpaths: Object.values(data).map((post) => {\n\t\t\treturn { params: { slug: post.slug } };\n\t\t}),\n\t\tfallback: \"blocking\",\n\t};\n};\n","5":"type T_BlogPostPageProps = {\n\tpostDetails: T_BlogPost;\n\tpostContent: string;\n};\n\nexport const getStaticProps: GetStaticProps<T_BlogPostPageProps, { slug: string }> = async ({\n\tparams,\n}) => {\n\tconst DEFAULT_LANG = \"en\";\n\tconst slug = params?.slug || \"\";\n\tif (!slug) throw new Error(`Invalid slug: \"${slug}\"`);\n\n\tconst post = await loadData<T_RawBlogPostResponse>({ localPath: `blog/posts/${slug}.json` });\n\tconst mdxCompiled = await compile({ content: post.content });\n\n\treturn {\n\t\tprops: {\n\t\t\tpostDetails: {\n\t\t\t\t...post.details,\n\t\t\t\tcontent: post.details.content[DEFAULT_LANG],\n\t\t\t},\n\t\t\tpostContent: mdxCompiled.code,\n\t\t},\n\t};\n};\n","6":"import * as React from \"react\";\nimport cn from \"classnames\";\nimport dynamic from \"next/dynamic\";\n\nimport { MainLayout, Page } from \"~/components/layout\";\nimport {\n\tBlock,\n\tButton,\n\tIcon,\n\tInlineText,\n\tLink,\n\tList,\n\tSpace,\n\tText,\n\tTitle,\n} from \"~/components/primitive\";\nimport {\n\tCallout,\n\tCopyToClipboardPopover,\n\tImageWithLink,\n\tToast,\n\tTooltip,\n} from \"~/components/shared\";\nimport WEBSITE_METADATA from \"~/data/metadata.json\";\nimport { withOnlyClientRender } from \"~/hocs\";\nimport AnalyticsService from \"~/modules/analytics\";\nimport { MDXContent, getMDXExport } from \"~/modules/mdx/client\";\nimport { ROUTES } from \"~/modules/routing\";\nimport { useBrowserStorageState } from \"@diegofrayo/storage\";\nimport twcss from \"@diegofrayo/twcss\";\nimport type DR from \"@diegofrayo/types\";\nimport { generateSlug } from \"@diegofrayo/utils/strings\";\nimport v from \"@diegofrayo/v\";\n\nimport { BlogPostCategory } from \"../components\";\nimport type { T_BlogPost } from \"../types\";\n\nexport type T_BlogPostPageProps = {\n\tpostDetails: T_BlogPost;\n\tpostContent: string;\n};\n\nfunction BlogPostPage({ postDetails, postContent }: T_BlogPostPageProps) {\n\treturn (\n\t\t<Page\n\t\t\tconfig={{\n\t\t\t\ttitle: postDetails.content.title,\n\t\t\t\tdescription: postDetails.content.description,\n\t\t\t\tdisableSEO: postDetails.is_published === false,\n\t\t\t\tpathname: `${ROUTES.BLOG}/${postDetails.slug}`,\n\t\t\t}}\n\t\t>\n\t\t\t<MainLayout title={postDetails.content.title}>\n\t\t\t\t<BlogPostDetails postDetails={postDetails} />\n\t\t\t\t<Space size={1.5} />\n\n\t\t\t\t<MDXContent\n\t\t\t\t\tcode={postContent}\n\t\t\t\t\tcomponents={getBlogPostDynamicComponents(getMDXExport(postContent))}\n\t\t\t\t\tglobals={{\n\t\t\t\t\t\tDATA: { post: postDetails },\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<Space size={5} />\n\n\t\t\t\t<BlogPostSources sources={postDetails.sources} />\n\t\t\t\t<Space size={12} />\n\n\t\t\t\t<RateContent />\n\t\t\t\t<Space size={4} />\n\n\t\t\t\t<BlogPostActions />\n\t\t\t</MainLayout>\n\t\t</Page>\n\t);\n}\n\nexport default BlogPostPage;\n\n// --- UTILS ---\n\nfunction getBlogPostDynamicComponents(componentsMap: DR.Object<string>) {\n\tconst COMPONENTS_PATHS_MAP = {\n\t\tPlayground: \"../../../components/shared/Playground\",\n\t\tSourceCode: \"../../../components/shared/SourceCode\",\n\t\tMFMAMGitHubRepo: \"./components/my-favorite-music-and-mdx/MFMAMGitHubRepo\",\n\t\tMFMAMHelloWorldMDX: \"./components/my-favorite-music-and-mdx/MFMAMHelloWorldMDX\",\n\t\tMFMAMSpotifyPlaylist: \"./components/my-favorite-music-and-mdx/MFMAMSpotifyPlaylist\",\n\t\tSPVEEQPlaces: \"./components/sitios-para-visitar-en-el-quindio/SPVEEQPlaces\",\n\t} as DR.Object<string>;\n\n\tconst components = {\n\t\tCallout,\n\t\tCopyToClipboardPopover,\n\t\tImageWithLink,\n\t\tToast,\n\t\tTooltip,\n\t} as DR.Object;\n\n\tObject.keys(componentsMap[\"Components\"] || {}).forEach((componentName) => {\n\t\tif (COMPONENTS_PATHS_MAP[componentName]) {\n\t\t\tif (componentName === \"Playground\") {\n\t\t\t\tcomponents[componentName] = dynamic(\n\t\t\t\t\t() => import(\"../../../../components/shared/Playground\"),\n\t\t\t\t\t{\n\t\t\t\t\t\tssr: true,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t} else if (componentName === \"MFMAMGitHubRepo\") {\n\t\t\t\tcomponents[componentName] = dynamic(\n\t\t\t\t\t() => import(\"../components/my-favorite-music-and-mdx/MFMAMGitHubRepo\"),\n\t\t\t\t\t{\n\t\t\t\t\t\tssr: true,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t} else if (componentName === \"MFMAMHelloWorldMDX\") {\n\t\t\t\tcomponents[componentName] = dynamic(\n\t\t\t\t\t() => import(\"../components/my-favorite-music-and-mdx/MFMAMHelloWorldMDX\"),\n\t\t\t\t\t{\n\t\t\t\t\t\tssr: true,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t} else if (componentName === \"MFMAMSpotifyPlaylist\") {\n\t\t\t\tcomponents[componentName] = dynamic(\n\t\t\t\t\t() => import(\"../components/my-favorite-music-and-mdx/MFMAMSpotifyPlaylist\"),\n\t\t\t\t\t{\n\t\t\t\t\t\tssr: true,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t} else if (componentName === \"SPVEEQPlaces\") {\n\t\t\t\tcomponents[componentName] = dynamic(\n\t\t\t\t\t() => import(\"../components/sitios-para-visitar-en-el-quindio/SPVEEQPlaces\"),\n\t\t\t\t\t{\n\t\t\t\t\t\tssr: true,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn components;\n}\n","7":"import * as React from \"react\";\nimport { getMDXComponent, getMDXExport } from \"mdx-bundler/client\";\nimport cn from \"classnames\";\n\nimport {\n\tBlock,\n\tBlockquote,\n\tCode,\n\tImage,\n\tLink,\n\tList,\n\tSpace,\n\tText,\n\tTitle,\n} from \"~/components/primitive\";\nimport { SourceCode } from \"~/components/shared\";\nimport type { T_TitleProps } from \"~/components/primitive/Title\";\nimport type DR from \"@diegofrayo/types\";\n\nimport v from \"@diegofrayo/v\";\nimport styles from \"./styles.module.css\";\n\ntype T_MDXContentProps = {\n\tcode: string;\n\tcomponents?: DR.Object;\n\tglobals?: DR.Object;\n};\n\nexport function MDXContent({ code, components = {}, globals = {} }: T_MDXContentProps) {\n\tconst Component = React.useMemo(() => getMDXComponent(code, globals), [code, globals]);\n\n\treturn (\n\t\t<Block className={cn(\"dr-mdx-content\", styles[\"dr-mdx-content\"])}>\n\t\t\t<Component components={{ ...MDXComponents, ...components }} />\n\t\t</Block>\n\t);\n}\n\nexport { getMDXExport };\n\n// DOCS: https://mdxjs.com/table-of-components/\n/* WARN:\n * I don't know how to type this object, so, I used any for this\n * It is not important to solve this\n */\n// @ts-ignore\nexport const MDXComponents = {\n\t// --- PRIMITIVE COMPONENTS ---\n\ta: function CustomA({ children, href }: DR.DOM.HTMLElementAttributes[\"a\"]) {\n\t\treturn (\n\t\t\t<Link\n\t\t\t\thref={href || \"\"}\n\t\t\t\tvariant={Link.variant.STYLED}\n\t\t\t\tisExternalLink\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</Link>\n\t\t);\n\t},\n\tblockquote: Blockquote,\n\tcode: function CustomCode({ children }: DR.DOM.HTMLElementAttributes[\"code\"]) {\n\t\tif (v.isString(children)) {\n\t\t\treturn <Code variant={Code.variant.STYLED}>{children}</Code>;\n\t\t}\n\n\t\tthrow new Error(\"Code component: Invalid children\");\n\t},\n\th1: createTitleComponent(\"h1\", {}),\n\th2: createTitleComponent(\"h2\", {}),\n\th3: createTitleComponent(\"h3\", {}),\n\th4: createTitleComponent(\"h4\", {}),\n\thr: function CustomHr() {\n\t\treturn <Space variant={Space.variant.DASHED} />;\n\t},\n\timg: function CustomImage(props: DR.DOM.HTMLElementAttributes[\"img\"]) {\n\t\treturn (\n\t\t\t<Image\n\t\t\t\t{...props}\n\t\t\t\talt={props.alt || \"\"}\n\t\t\t\tuseNativeImage\n\t\t\t/>\n\t\t);\n\t},\n\tli: List.Item,\n\tp: Text,\n\tpre: function CustomPre({ children }: DR.DOM.HTMLElementAttributes[\"pre\"]) {\n\t\treturn <SourceCode code={children} />;\n\t},\n\tul: function CustomUl({ children }: DR.DOM.HTMLElementAttributes[\"ul\"]) {\n\t\treturn <List variant={List.variant.SIMPLE}>{children}</List>;\n\t},\n\n\t// --- CUSTOM COMPONENTS ---\n\tBlock,\n\tSourceCode,\n};\n\n// --- INTERNALS ---\n\nfunction createTitleComponent(Tag: \"h1\" | \"h2\" | \"h3\" | \"h4\", props: Omit<T_TitleProps, \"is\">) {\n\treturn function CustomTitle({ children }: DR.DOM.HTMLElementAttributes[\"h1\"]) {\n\t\treturn (\n\t\t\t<Title\n\t\t\t\t{...props}\n\t\t\t\tis={Tag}\n\t\t\t\tvariant={Title.variant.STYLED}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</Title>\n\t\t);\n\t};\n}\n","8":"import * as React from \"react\";\nimport cn from \"classnames\";\nimport { highlight } from \"sugar-high\";\n\nimport { Block, Button, Icon, Link, Pre } from \"~/components/primitive\";\nimport AnalyticsService from \"~/modules/analytics\";\nimport v from \"@diegofrayo/v\";\nimport { createArray } from \"@diegofrayo/utils/arrays-and-objects\";\nimport { throwError } from \"@diegofrayo/utils/misc\";\nimport { generateSlug } from \"@diegofrayo/utils/strings\";\nimport type DR from \"@diegofrayo/types\";\n\nimport CopyToClipboardPopover from \"./CopyToClipboardPopover\";\n\nexport type T_SourceCodeProps = {\n\tcode: DR.React.Children;\n\tsourceURL?: string;\n\tclassName?: string;\n};\n\nfunction SourceCode({ code, sourceURL = \"\", className = \"\" }: T_SourceCodeProps) {\n\t// --- STATES & REFS ---\n\tconst [highlightedCode, setHighlightedCode] = React.useState(\"\");\n\tconst [containerHeight, setContainerHeight] = React.useState<number | \"auto\">(\"auto\");\n\tconst containerRef = React.useRef<null | HTMLDivElement>(null);\n\n\t// --- UTILS ---\n\tconst extractChildren = React.useCallback(function extractChildren(\n\t\tcodeParam: T_SourceCodeProps[\"code\"],\n\t) {\n\t\tconst result = React.isValidElement(codeParam) ? codeParam.props.children : codeParam;\n\n\t\treturn v.isString(result) ? result : throwError(\"Invalid text to copy or highlight\");\n\t}, []);\n\n\t// --- EFFECTS ---\n\tReact.useEffect(\n\t\tfunction highlightCode() {\n\t\t\tsetHighlightedCode(highlight(extractChildren(code)));\n\t\t},\n\t\t[code, extractChildren],\n\t);\n\n\tReact.useEffect(\n\t\tfunction onHighlightedCode() {\n\t\t\tif (highlightedCode && containerRef.current) {\n\t\t\t\tconst sourceCodeHeight = containerRef.current.querySelector(\"pre\")?.offsetHeight || 500;\n\t\t\t\tsetContainerHeight(sourceCodeHeight > 500 ? 500 : \"auto\");\n\t\t\t}\n\t\t},\n\t\t[highlightedCode],\n\t);\n\n\treturn (\n\t\t<Block\n\t\t\tclassName={cn(\n\t\t\t\t\"dr-source-code\",\n\t\t\t\t\"tw-relative tw-overflow-hidden tw-rounded-md tw-border dr-bg-color-surface-200 dr-border-color-surface-300\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\tstyle={{ height: containerHeight }}\n\t\t\tref={containerRef}\n\t\t\tdata-markdown-block\n\t\t>\n\t\t\t<Block className=\"tw-absolute tw-right-0 tw-top-0 tw-flex tw-w-full tw-justify-between tw-pb-1 tw-text-right dr-bg-color-surface-300\">\n\t\t\t\t<Block className=\"tw-ml-2 tw-flex tw-pt-2\">\n\t\t\t\t\t{createArray(3).map((element) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Block\n\t\t\t\t\t\t\t\tkey={generateSlug(`SourceCode-Block-element-${element}`)}\n\t\t\t\t\t\t\t\tclassName={cn(\"tw-mr-1.5 tw-inline-block tw-rounded-full tw-wh-3 last:tw-mr-0\", {\n\t\t\t\t\t\t\t\t\t\"tw-bg-red-500\": element === 1,\n\t\t\t\t\t\t\t\t\t\"tw-bg-yellow-500\": element === 2,\n\t\t\t\t\t\t\t\t\t\"tw-bg-green-500\": element === 3,\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</Block>\n\t\t\t\t<Block>\n\t\t\t\t\t{v.isNotEmptyString(sourceURL) ? (\n\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\tvariant={Link.variant.SIMPLE}\n\t\t\t\t\t\t\thref={sourceURL}\n\t\t\t\t\t\t\tclassName=\"tw-mr-2 tw-inline-block\"\n\t\t\t\t\t\t\tonClick={AnalyticsService.trackClickEvent(\"SOURCE_CODE|OPEN_LINK\")}\n\t\t\t\t\t\t\tisExternalLink\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Icon icon={Icon.icon.EXTERNAL_LINK} />\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t) : null}\n\t\t\t\t\t<CopyToClipboardPopover textToCopy={extractChildren(code)}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant={Button.variant.SIMPLE}\n\t\t\t\t\t\t\tclassName=\"tw-mr-2 tw-inline-block\"\n\t\t\t\t\t\t\tonClick={AnalyticsService.trackClickEvent(\"SOURCE_CODE|COPY_CODE\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Icon icon={Icon.icon.COPY} />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</CopyToClipboardPopover>\n\t\t\t\t</Block>\n\t\t\t</Block>\n\t\t\t<Pre\n\t\t\t\tvariant={Pre.variant.UNSTYLED}\n\t\t\t\tclassName=\"tw-max-h-full tw-overflow-auto tw-p-3 tw-pt-10 tw-text-base\"\n\t\t\t\tdangerouslySetInnerHTML={{ __html: highlightedCode }}\n\t\t\t/>\n\t\t</Block>\n\t);\n}\n\nexport default SourceCode;\n","7-styles":"/* Spacing: parent components */\n.dr-mdx-content > :is(blockquote, hr, ol, p, ul, a > img, *[data-markdown-block]) {\n\t@apply tw-mb-6;\n}\n\n.dr-mdx-content > *:last-child {\n\t@apply tw-mb-0;\n}\n\n/* Spacing: nested components */\n.dr-mdx-content\n\t:is(\n\t\tli > p,\n\t\tli > :global(.dr-source-code),\n\t\tli > blockquote,\n\t\tli > img,\n\t\tblockquote > p,\n\t\tli > a > img\n\t) {\n\t@apply tw-mb-3;\n}\n\n/* Spacing: titles */\n.dr-mdx-content > :is(h1, h2, h3, h4) {\n\t@apply tw-mt-8;\n\t@apply tw-mb-3;\n}\n\n/* Spacing: nested UL lists */\n.dr-mdx-content :is(li > ul, li > :global(.dr-source-code)) {\n\t@apply tw-mt-3;\n}\n\n/* Ordered lists */\n.dr-mdx-content ol {\n\t@apply tw-pl-9;\n\tlist-style-type: decimal;\n}\n\n.dr-mdx-content ol > li {\n\t@apply tw-mb-6;\n}\n\n/* Images */\n.dr-mdx-content :is(> a > img, li > a > img) {\n\t@apply tw-rounded-md;\n\tmargin-left: auto;\n\tmargin-right: auto;\n}\n"}}},"content":"export const Components = {\n\tPlayground: \"Playground\",\n\tMFMAMGitHubRepo: \"MFMAMGitHubRepo\",\n\tMFMAMHelloWorldMDX: \"MFMAMGitHubRepo\",\n\tMFMAMSpotifyPlaylist: \"MFMAMSpotifyPlaylist\",\n};\n\n**Spotify** just created a playlist with the most listened songs by me during this 2020, so, I took this opportunity to write a tutorial about [MDX](https://mdxjs.com/) and [Next.js](https://nextjs.org).\n\n> **MDX** is a **Markdown** language enhancement, making it more powerful and customizable, because **MDX** allows rendering **React components** inside of **Markdown** files.\n\nThis tutorial was written using **MDX**, so, below, you can see an example of a **React component** rendered in this post.\n\n<Playground\n\tlanguage=\"tsx\"\n\tPreview={() => {\n\t\treturn <MFMAMHelloWorldMDX text=\"I'm a React component that uses Tailwind CSS for styling\" />;\n\t}}\n\tsourceCode={DATA.post.assets.$sourceCodeFiles[\"1\"]}\n\theight={300}\n/>\n\n## Setting up **Next.js** and MDX\n\nI built this website using **Next.js**, I'm going to talk about how I configured **MDX** to create the blog section. To accomplish it, this [article](https://sergiodxa.com/articles/using-mdx-with-remote-content) posted by [Sergio Xalambrí](https://twitter.com/sergiodxa) was helpful for me.\n\nFirst of all, I configured **MDX** with **Next.js** and in this [link](https://mdxjs.com/getting-started/next) you can check out the instructions, it is really easy to complete it.\n\nThen, I installed the [next-mdx-remote](https://github.com/hashicorp/next-mdx-remote) package. This package allows rendering **MDX** files that can be hosted on a remote location, for example, a **CMS**, a **CDN**, a **database** or anywhere. There are other reasons for which it is useful to use this package, in this [section of its GitHub repository](https://github.com/hashicorp/next-mdx-remote#background--theory) you can dig deep in the problems that **next-mdx-remote** solves.\n\nNow, I'm going to explain how to use **next-mdx-remote** for rendering a blog post in a **Next.js** page depending on a URL param.\n\nFirst, I created the `getStaticPaths` function where the `paths` property is an array of slugs of all my blog posts that I want to **pre-render**.\n\n<SourceCode\n\tcode={DATA.post.assets.$sourceCodeFiles[\"4\"]}\n\tsourceURL={DATA.post.assets.github.files[\"pages|blog|slug\"].url}\n/>\n\n> I chose the **static-site generation** approach because I don't have a lot of pages, probably less than 20 and its content does not change often. I recommend reading more about this topic in this [Next.js docs page](https://nextjs.org/docs/basic-features/data-fetching), its explanation is very clear.\n\nNow, inside of the `getStaticProps` function, the **MDX** content of all blog posts is readed. This function only executes at build time, I mean, on the server side. At the moment I store all my blog posts **MDX** files inside of this website repository. In the future, I could store them on a **CMS**, for example.\n\n<SourceCode\n\tcode={DATA.post.assets.$sourceCodeFiles[\"5\"]}\n\tsourceURL={DATA.post.assets.github.files[\"pages|blog|slug\"].url}\n/>\n\n> **Problem:** I can't import components or variables directly inside of **MDX** files when I use **next-mdx-remote** to compile them. In this [link](https://github.com/hashicorp/next-mdx-remote#caveats) you can read more about this.\n\n> **Solution:** I had to pass a config object when I invoked the `serialize` function. The `scope` property is an object that contains the **data (variables)** that I need to use inside of my **MDX** files.\n\nFinally, this is the component that renders a blog post:\n\n<SourceCode\n\tcode={DATA.post.assets.$sourceCodeFiles[\"6\"]}\n\tsourceURL={DATA.post.assets.github.files[\"components|blog|slug\"].url}\n/>\n\nIn regards to the **MDX** components styling, at the beginning I used this [Tailwind CSS plugin](https://tailwindcss.com/docs/typography-plugin), but then, I decided don't use it anymore and I built a component with my own styles.\n\n<SourceCode\n\tcode={DATA.post.assets.$sourceCodeFiles[\"7\"]}\n\tsourceURL={DATA.post.assets.github.files[\"MDXContent\"].url}\n/>\n<SourceCode\n\tcode={DATA.post.assets.$sourceCodeFiles[\"7-styles\"]}\n\tsourceURL={DATA.post.assets.github.files[\"MDXContent-Styles\"].url}\n/>\n\n> `@apply` directive allows me to use **Tailwind CSS** classes within my `css.modules` files.\n\nI used [sugar-high](https://sugar-high.vercel.app/) for code syntax highlighting:\n\n<SourceCode\n\tcode={DATA.post.assets.$sourceCodeFiles[\"8\"]}\n\tsourceURL={DATA.post.assets.github.files[\"SourceCode\"].url}\n/>\n\n## Final words\n\nI share the URL of this repository in case of you want to see more details about my website and my blog section were implemented. Allright, this is all, thanks for reading.\n\n<MFMAMGitHubRepo\n\tname={DATA.post.assets.github.name}\n\turl={DATA.post.assets.github.url}\n\tdescription={DATA.post.assets.github.description}\n/>\n\nI share the **Spotify** playlist for which I wrote down this blog post:\n\n<MFMAMSpotifyPlaylist />\n"}