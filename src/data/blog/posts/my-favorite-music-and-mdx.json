{"details":{"slug":"my-favorite-music-and-mdx","content":{"en":{"title":"My favorite music and MDX","description":"Introduction to MDX and how to use it with Next.js to create a simple blog."}},"categories":["mdx","next.js","markdown","tailwind-css"],"locales":["en"],"created_at":"2020/11/28","published_at":"2020/12/03","updated_at":"2021/08/14","is_published":true,"sources":[],"assets":{"github":{"name":"website","url":"https://github.com/diegofrayo/website","description":"My personal website","files":{"MDXContent":{"fileName":"src/modules/mdx/client.tsx","url":"https://github.com/diegofrayo/website/blob/master/src/modules/mdx/client.tsx"},"SourceCode":{"fileName":"src/components/shared/SourceCode.tsx","url":"https://github.com/diegofrayo/website/blob/master/src/components/shared/SourceCode.tsx"},"mdx":{"fileName":"src/modules/mdx/client.tsx","url":"https://github.com/diegofrayo/website/blob/master/src/modules/mdx/client.tsx"},"components|blog|slug":{"fileName":"src/modules/pages/blog/BlogPostPage.tsx","url":"https://github.com/diegofrayo/website/blob/master/src/modules/pages/blog/BlogPostPage.tsx"},"pages|blog|slug":{"fileName":"src/pages/blog/[slug].tsx","url":"https://github.com/diegofrayo/website/blob/master/src/pages/blog/[slug].tsx"},"MDXContent-Styles":{"fileName":"src/modules/mdx/styles.module.css","url":"https://github.com/diegofrayo/website/blob/master/src/modules/mdx/styles.module.css"}}},"$sourceCodeFiles":{"1":"export function HelloWorldMDX({ text }: T_Object): T_ReactElement {\n\treturn <p className=\"tw-bg-red-200 tw-block tw-p-2 tw-text-red-700\">{text}</p>;\n}\n","4":"export const getStaticPaths: GetStaticPaths = async function getStaticPaths() {\n\tconst data = await loadData<T_RawBlogPostsResponse>({ page: \"blog\" });\n\n\treturn {\n\t\tpaths: Object.values(data).map((post) => {\n\t\t\treturn { params: { slug: post.config.slug } };\n\t\t}),\n\t\tfallback: \"blocking\",\n\t};\n};\n","5":"type T_BlogPostPageProps = {\n\tpostDetails: T_BlogPost;\n\tpostContent: string;\n};\n\nexport const getStaticProps: GetStaticProps<T_BlogPostPageProps, { slug: string }> = async ({\n\tparams,\n}) => {\n\tconst DEFAULT_LANG = \"en\";\n\tconst posts = await loadData<T_RawBlogPostsResponse>({ page: \"blog\" });\n\tconst slug = params?.slug || \"\";\n\tconst postDetails = { ...posts[slug] };\n\n\tif (!postDetails) throw new Error(`Invalid post slug: \"${slug}\"`);\n\n\tconst mdxCompiled = await compile({\n\t\tsource: `./src/data/blog/posts/content/${replaceAll(postDetails.config.created_at, \"/\", \"-\")}-${\n\t\t\tpostDetails.config.slug\n\t\t}.mdx`,\n\t});\n\n\treturn {\n\t\tprops: {\n\t\t\tpostDetails: {\n\t\t\t\t...postDetails,\n\t\t\t\tcontent: postDetails.content[DEFAULT_LANG],\n\t\t\t},\n\t\t\tpostContent: mdxCompiled.code,\n\t\t},\n\t};\n};\n","6":"import * as React from \"react\";\n\nimport { MainLayout, Page } from \"~/components/layout\";\nimport { Space } from \"~/components/primitive\";\nimport { Callout, ImageWithLink, Playground, SourceCode } from \"~/components/shared\";\nimport { MDXContent } from \"~/modules/mdx/client\";\nimport { ROUTES } from \"~/modules/routing\";\nimport type { T_BlogPost } from \"~/modules/pages/blog/types\";\n\nimport * as BlogPostsComponents from \"./components/my-favorite-music-and-mdx\";\n\nexport type T_BlogPostPageProps = {\n\tpostDetails: T_BlogPost;\n\tpostContent: string;\n};\n\nfunction BlogPostPage({ postDetails, postContent }: T_BlogPostPageProps) {\n\treturn (\n\t\t<Page\n\t\t\tconfig={{\n\t\t\t\ttitle: postDetails.content.title,\n\t\t\t\tdescription: postDetails.content.description,\n\t\t\t\tdisableSEO: postDetails.config.is_published === false,\n\t\t\t\tpathname: `${ROUTES.BLOG}/${postDetails.config.slug}`,\n\t\t\t}}\n\t\t>\n\t\t\t<MainLayout title={postDetails.content.title}>\n\t\t\t\t<BlogPostDetails postDetails={postDetails} />\n\t\t\t\t<Space size={1.5} />\n\n\t\t\t\t<MDXContent\n\t\t\t\t\tcode={postContent}\n\t\t\t\t\tcomponents={{\n\t\t\t\t\t\tCallout,\n\t\t\t\t\t\tImageWithLink,\n\t\t\t\t\t\tPlayground,\n\t\t\t\t\t\tSourceCode,\n\t\t\t\t\t\t...BlogPostsComponents,\n\t\t\t\t\t}}\n\t\t\t\t\tglobals={{\n\t\t\t\t\t\tDATA: { post: postDetails },\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<Space size={5} />\n\n\t\t\t\t<BlogPostSources sources={postDetails.config.sources} />\n\t\t\t\t<Space size={12} />\n\n\t\t\t\t<RateContent />\n\t\t\t\t<Space size={1.5} />\n\n\t\t\t\t<BlogPostActions />\n\t\t\t</MainLayout>\n\t\t</Page>\n\t);\n}\n\nexport default BlogPostPage;\n","7":"import * as React from \"react\";\nimport { getMDXComponent } from \"mdx-bundler/client\";\nimport cn from \"classnames\";\n\nimport { Link, List, Pre, Space, Text, Code, Block, Title, Image } from \"~/components/primitive\";\nimport type { T_TitleProps } from \"~/components/primitive/Title\";\nimport type DR from \"@diegofrayo/types\";\n\nimport styles from \"./styles.module.css\";\n\ntype T_MDXContentProps = {\n\tcode: string;\n\tcomponents?: DR.Object;\n\tglobals?: DR.Object;\n};\n\nexport function MDXContent({ code, components = {}, globals = {} }: T_MDXContentProps) {\n\tconst Component = React.useMemo(() => getMDXComponent(code, globals), [code, globals]);\n\n\treturn (\n\t\t<Block className={cn(styles[\"dr-mdx-content\"])}>\n\t\t\t<Component components={{ ...MDXComponents, ...components }} />\n\t\t</Block>\n\t);\n}\n","8":"import * as React from \"react\";\nimport cn from \"classnames\";\n\nimport { Block, Code, Icon, InlineText, Link, Pre, Space } from \"~/components/primitive\";\nimport v from \"@diegofrayo/v\";\n\nimport CopyToClipboardPopover from \"./CopyToClipboardPopover\";\n\nexport type T_SourceCodeProps = {\n\tlanguage: \"jsx\" | \"tsx\" | \"css\" | \"typescript\" | \"javascript\" | \"bash\" | \"yaml\" | \"markdown\";\n\tcode: string;\n\tfileName?: string;\n\tsourceURL?: string;\n\tclassName?: string;\n\theight?: \"100%\" | \"auto\" | number;\n};\n\nfunction SourceCode({\n\tlanguage,\n\tcode,\n\tfileName = \"\",\n\tsourceURL = \"\",\n\tclassName = \"\",\n\theight = \"auto\",\n}: T_SourceCodeProps) {\n\t// --- VARS ---\n\tconst codeTitle = v.isNotEmptyString(fileName)\n\t\t? `// ${fileName}`\n\t\t: v.isNotEmptyString(sourceURL)\n\t\t? `// ${sourceURL.slice(sourceURL.lastIndexOf(\"/\") + 1, sourceURL.length)}`\n\t\t: \"\";\n\n\treturn (\n\t\t<Block\n\t\t\tclassName={cn(\n\t\t\t\t\"dr-source-code tw-flex tw-flex-col tw-rounded-md tw-border dr-border-color-surface-300\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\tstyle={{\n\t\t\t\theight,\n\t\t\t\tmaxHeight: height === \"auto\" ? 500 : \"none\",\n\t\t\t}}\n\t\t\tdata-markdown-block\n\t\t>\n\t\t\t<Block\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"tw-flex tw-flex-shrink-0 tw-flex-wrap tw-items-center tw-justify-between tw-rounded-t-md tw-px-4 tw-py-2 tw-pr-2 tw-font-mono tw-text-sm\",\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{v.isNotEmptyString(codeTitle) ? (\n\t\t\t\t\t<Code className=\"tw-mr-4 tw-flex-1 tw-truncate tw-font-bold\">{codeTitle}</Code>\n\t\t\t\t) : null}\n\t\t\t\t<InlineText className=\"tw-ml-auto tw-inline-block tw-flex-shrink-0 tw-bg-yellow-300 tw-px-3 tw-py-1 tw-text-xs tw-font-bold tw-text-yellow-700\">\n\t\t\t\t\t{language}\n\t\t\t\t</InlineText>\n\t\t\t</Block>\n\n\t\t\t<Pre\n\t\t\t\tvariant={Pre.variant.HIGHLIGHTED}\n\t\t\t\tclassName=\"tw-flex-1 tw-border-y dr-border-color-surface-300\"\n\t\t\t>\n\t\t\t\t{code}\n\t\t\t</Pre>\n\n\t\t\t<Block className=\"tw-flex tw-flex-shrink-0 tw-flex-col-reverse tw-rounded-b-md tw-px-4 tw-py-2 tw-pr-2 tw-text-sm tw-font-bold tw-text-white sm:tw-flex-row sm:tw-justify-end\">\n\t\t\t\t{v.isNotEmptyString(sourceURL) ? (\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\tvariant={Link.variant.SIMPLE}\n\t\t\t\t\t\t\thref={sourceURL}\n\t\t\t\t\t\t\tclassName=\"tw-ml-auto tw-inline-block tw-w-48 tw-text-right sm:tw-ml-0 sm:tw-text-left\"\n\t\t\t\t\t\t\tisExternalLink\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Icon\n\t\t\t\t\t\t\t\ticon={Icon.icon.GITHUB_MONO}\n\t\t\t\t\t\t\t\tsize={16}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<InlineText className=\"tw-ml-1 tw-lowercase\">See source code</InlineText>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Space responsive=\"tw-block tw-mb-1 tw-mr-0 sm:tw-inline-block sm:tw-mb-0 sm:tw-mr-6\" />\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t) : null}\n\n\t\t\t\t<CopyToClipboardPopover\n\t\t\t\t\ttextToCopy={code}\n\t\t\t\t\tbuttonClassName=\"tw-text-right tw-w-48 tw-ml-auto tw-inline-block\"\n\t\t\t\t>\n\t\t\t\t\t<Icon icon={Icon.icon.CLIPBOARD} />\n\t\t\t\t\t<InlineText className=\"tw-ml-1 tw-lowercase\">Copy to clipboard</InlineText>\n\t\t\t\t</CopyToClipboardPopover>\n\t\t\t</Block>\n\t\t</Block>\n\t);\n}\n\nexport default SourceCode;\n","7-styles":"/* Spacing: parent components */\n.dr-mdx-content\n\t> :is(blockquote, hr, ol, p, :global(.dr-pre--styled), ul, a > img, *[data-markdown-block]) {\n\t@apply tw-mb-6;\n}\n\n.dr-mdx-content > *:last-child {\n\t@apply tw-mb-0;\n}\n\n/* Spacing: nested components */\n.dr-mdx-content\n\t:is(\n\t\tli > p,\n\t\tli > :global(.dr-pre--styled),\n\t\tli > blockquote,\n\t\tli > img,\n\t\tblockquote > p,\n\t\tli > a > img\n\t) {\n\t@apply tw-mb-3;\n}\n\n/* Spacing: titles */\n.dr-mdx-content > :is(h1, h2, h3, h4) {\n\t@apply tw-mt-8;\n\t@apply tw-mb-3;\n}\n\n/* Spacing: nested UL lists */\n.dr-mdx-content :is(li > ul, li > :global(.dr-pre--styled)) {\n\t@apply tw-mt-3;\n}\n\n/* Ordered lists */\n.dr-mdx-content ol {\n\t@apply tw-pl-9;\n\tlist-style-type: decimal;\n}\n\n.dr-mdx-content ol > li {\n\t@apply tw-mb-6;\n}\n\n/* Images */\n.dr-mdx-content :is(> a > img, li > a > img) {\n\t@apply tw-rounded-md;\n\tmargin-left: auto;\n\tmargin-right: auto;\n}\n"}}},"content":"export const Components = {\n\tPlayground: \"Playground\",\n\tMFMAMGitHubRepo: \"MFMAMGitHubRepo\",\n\tMFMAMHelloWorldMDX: \"MFMAMGitHubRepo\",\n\tMFMAMSpotifyPlaylist: \"MFMAMSpotifyPlaylist\",\n};\n\n**Spotify** just created a playlist with the most listened songs by me during this 2020, so, I took this opportunity to write a tutorial about [MDX](https://mdxjs.com/) and [Next.js](https://nextjs.org).\n\n> **MDX** is a **Markdown** language enhancement, making it more powerful and customizable, because **MDX** allows rendering **React components** inside of **Markdown** files.\n\nThis tutorial was written using **MDX**, so, below, you can see an example of a **React component** rendered in this post.\n\n<Playground\n\tlanguage=\"tsx\"\n\tPreview={() => {\n\t\treturn <MFMAMHelloWorldMDX text=\"I'm a React component that uses Tailwind CSS for styling\" />;\n\t}}\n\tsourceCode={DATA.post.assets.$sourceCodeFiles[\"1\"]}\n\theight={300}\n/>\n\n## Setting up **Next.js** and MDX\n\nI built this website using **Next.js**, I'm going to talk about how I configured **MDX** to create the blog section. To accomplish it, this [article](https://sergiodxa.com/articles/using-mdx-with-remote-content) posted by [Sergio Xalambrí](https://twitter.com/sergiodxa) was helpful for me.\n\nFirst of all, I configured **MDX** with **Next.js** and in this [link](https://mdxjs.com/getting-started/next) you can check out the instructions, it is really easy to complete it.\n\nThen, I installed the [next-mdx-remote](https://github.com/hashicorp/next-mdx-remote) package. This package allows rendering **MDX** files that can be hosted on a remote location, for example, a **CMS**, a **CDN**, a **database** or anywhere. There are other reasons for which it is useful to use this package, in this [section of its GitHub repository](https://github.com/hashicorp/next-mdx-remote#background--theory) you can dig deep in the problems that **next-mdx-remote** solves.\n\nNow, I'm going to explain how to use **next-mdx-remote** for rendering a blog post in a **Next.js** page depending on a URL param.\n\nFirst, I created the `getStaticPaths` function where the `paths` property is an array of slugs of all my blog posts that I want to **pre-render**.\n\n<SourceCode\n\tcode={DATA.post.assets.$sourceCodeFiles[\"4\"]}\n\tsourceURL={DATA.post.assets.github.files[\"pages|blog|slug\"].url}\n/>\n\n> I chose the **static-site generation** approach because I don't have a lot of pages, probably less than 20 and its content does not change often. I recommend reading more about this topic in this [Next.js docs page](https://nextjs.org/docs/basic-features/data-fetching), its explanation is very clear.\n\nNow, inside of the `getStaticProps` function, the **MDX** content of all blog posts is readed. This function only executes at build time, I mean, on the server side. At the moment I store all my blog posts **MDX** files inside of this website repository. In the future, I could store them on a **CMS**, for example.\n\n<SourceCode\n\tcode={DATA.post.assets.$sourceCodeFiles[\"5\"]}\n\tsourceURL={DATA.post.assets.github.files[\"pages|blog|slug\"].url}\n/>\n\n> **Problem:** I can't import components or variables directly inside of **MDX** files when I use **next-mdx-remote** to compile them. In this [link](https://github.com/hashicorp/next-mdx-remote#caveats) you can read more about this.\n\n> **Solution:** I had to pass a config object when I invoked the `serialize` function. The `scope` property is an object that contains the **data (variables)** that I need to use inside of my **MDX** files.\n\nFinally, this is the component that renders a blog post:\n\n<SourceCode\n\tcode={DATA.post.assets.$sourceCodeFiles[\"6\"]}\n\tsourceURL={DATA.post.assets.github.files[\"components|blog|slug\"].url}\n/>\n\nIn regards to the **MDX** components styling, at the beginning I used this [Tailwind CSS plugin](https://tailwindcss.com/docs/typography-plugin), but then, I decided don't use it anymore and I built a component with my own styles.\n\n<SourceCode\n\tcode={DATA.post.assets.$sourceCodeFiles[\"7\"]}\n\tsourceURL={DATA.post.assets.github.files[\"MDXContent\"].url}\n/>\n<SourceCode\n\tcode={DATA.post.assets.$sourceCodeFiles[\"7-styles\"]}\n\tsourceURL={DATA.post.assets.github.files[\"MDXContent-Styles\"].url}\n/>\n\n> `@apply` directive allows me to use **Tailwind CSS** classes within my `css.modules` files.\n\nI used [prism-react-renderer](https://github.com/FormidableLabs/prism-react-renderer) for code syntax highlighting:\n\n<SourceCode\n\tcode={DATA.post.assets.$sourceCodeFiles[\"8\"]}\n\tsourceURL={DATA.post.assets.github.files[\"SourceCode\"].url}\n/>\n\n## Final words\n\nI share the URL of this repository in case of you want to see more details about my website and my blog section were implemented. Allright, this is all, thanks for reading.\n\n<MFMAMGitHubRepo\n\tname={DATA.post.assets.github.name}\n\turl={DATA.post.assets.github.url}\n\tdescription={DATA.post.assets.github.description}\n/>\n\nI share the **Spotify** playlist for which I wrote down this blog post:\n\n<MFMAMSpotifyPlaylist />\n"}