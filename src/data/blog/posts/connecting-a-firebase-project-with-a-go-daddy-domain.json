{"details":{"slug":"connecting-a-firebase-project-with-a-go-daddy-domain","content":{"en":{"title":"Connecting a Firebase project with a Go Daddy domain","description":"How to deploy a simple web project in Firebase and link it with Go Daddy domain."}},"categories":["go-daddy","firebase","node.js","hosting"],"locales":["en"],"created_at":"2018/06/01","published_at":"2018/06/01","updated_at":"2018/06/01","is_published":true,"sources":[],"assets":{"images":{"1":"/assets/images/pages/blog/posts/assets/connecting-a-firebase-project-with-a-go-daddy-domain/1.png","2":"/assets/images/pages/blog/posts/assets/connecting-a-firebase-project-with-a-go-daddy-domain/2.png","3":"/assets/images/pages/blog/posts/assets/connecting-a-firebase-project-with-a-go-daddy-domain/3.png"},"$sourceCodeFiles":{}}},"content":"<Callout variant={Callout.variant.WARNING}>\r\n\tThis tutorial is old, I don't use Firebase hosting and Go Daddy anymore. This website is hosted on\r\n\t[Vercel](https://vercel.com).\r\n</Callout>\r\n\r\nIn this tutorial I want to explain how to connect a **Go Daddy** domain with a **Firebase** project.\r\n\r\n## Requirements\r\n\r\n- **Node.js**\r\n- A **Go Daddy** domain\r\n- A **Firebase project**\r\n\r\n## Connecting our Firebase project with the Go Daddy domain\r\n\r\n1. Go to `https://console.firebase.google.com/project/[YOUR-PROJECT-ID]/hosting` and click on **Connect a domain**\r\n\r\n1. Now, you should see a modal, where you have to type the domain's name, for example: `diegofrayo.com`, and then click on **Continue**\r\n\r\n1. It's necessary to verify you are domain's owner, so, you have to create a **TXT record** on the domain's configuration on **Go Daddy**. To accomplish it, log into **Go Daddy** and go to `https://dcc.godaddy.com/manage/[YOUR-DOMAIN.COM]/dns`. Now, you have to create the **TXT record** using the information that Firebase provides you and wait until **Firebase** verifies that you are the domain's owner. _(I had to wait around one hour)_\r\n\r\n   > **IMPORTANT:** To create a **TXT Record**, it is required to enter a _Host_. **Firebase** proposes to use our domain's name as _Host_, for example `diegofrayo.com`. I **didn't** use my domain's name as _Host_, instead, I used the `@` symbol\r\n\r\n1. After **Firebase** verifies that the domain is yours, you have to create the **A records** using the information that Firebase provides. To do this, you have to go to the domain's configuration on **Go Daddy** and create them the same way that you have created the **TXT records** in the steps above. Before create them, it is important to delete all **A records** that you have created formerly\r\n\r\n   > **IMPORTANT:** To create an **A record**, it is necessary to enter the _Host_ and the _IP address_ where you domain will point. **Firebase** proposes to use the domain's name as _Host_, for example `diegofrayo.com`. I **didn't** use my domain's name as _Host_, instead, I used the `@` symbol\r\n\r\n   <ImageWithLink\r\n   \tsrc={DATA.post.assets.images[\"1\"]}\r\n   \talt=\"Creating a A record\"\r\n   \twidth={698}\r\n   \theight={190}\r\n   />\r\n\r\n   The domain's configuration on **Go Daddy** should look like this:\r\n\r\n   <ImageWithLink\r\n   \tsrc={DATA.post.assets.images[\"2\"]}\r\n   \talt=\"The domain's configuration\"\r\n   \twidth={698}\r\n   \theight={371}\r\n   />\r\n\r\n1. Now, you should wait a couple of hours until the changes take effect _(I waited for around 4 hours)_. After this, you will have the **Go Daddy** domain connected with your **Firebase** project\r\n\r\n## Deploying our website on Firebase Hosting\r\n\r\nTo deploy our website on **Firebase Hosting**, let's follow the next steps:\r\n\r\n1. Install **firebase-tools:** `npm install -g firebase-tools`\r\n\r\n1. Create a folder for our project and init it\r\n\r\n   ```bash\r\n   mkdir project-name\r\n   cd project-name\r\n   firebase init\r\n   ```\r\n\r\n   > When you execute the third command, you have to sign in using your **Google** Account\r\n\r\n1. Now, your project should have the next structure:\r\n\r\n   <ImageWithLink\r\n   \tsrc={DATA.post.assets.images[\"3\"]}\r\n   \talt=\"Our project's structure\"\r\n   \twidth={268}\r\n   \theight={366}\r\n   />\r\n\r\n   Inside of `public` folder we must store all website's assets. The `firebase.json` file should look like this:\r\n\r\n   ```json\r\n   {\r\n   \t\"hosting\": {\r\n   \t\t\"public\": \"public\",\r\n   \t\t\"ignore\": [\"firebase.json\", \"**/.*\", \"**/node_modules/**\"]\r\n   \t}\r\n   }\r\n   ```\r\n\r\n   > In adition, we can configure more things in this file, for example, redirections, rewrites and other interesting stuff. In this [link](https://firebase.google.com/docs/hosting/full-config?authuser=0) you can read more about this configuration file\r\n\r\n1. To test the website on your local environment, you can use `firebase serve` command, it creates a HTTP server and you can access it via [http://localhost:5000](http://localhost:5000)\r\n\r\n1. To deploy the website on **Firebase Hosting**, just execute `firebase deploy` command\r\n\r\n## Final words\r\n\r\nWhen you are creating the **A and TXT records** on **Go Daddy**, it's important to be patient and wait until the changes take effect, it could take a couple of hours. As you have seen, using **Firebase Hosting** you can deploy a website easily, besides getting an SSL certificate for free. I hope this tutorial has been useful for you, thanks for reading.\r\n"}